# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import communication_pb2 as communication__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in communication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list = channel.unary_stream(
                '/TagBasedFileSystem.ClientAPI/list',
                request_serializer=communication__pb2.TagList.SerializeToString,
                response_deserializer=communication__pb2.FileGeneralInfo.FromString,
                _registered_method=True)
        self.fileContent = channel.unary_unary(
                '/TagBasedFileSystem.ClientAPI/fileContent',
                request_serializer=communication__pb2.FileLocation.SerializeToString,
                response_deserializer=communication__pb2.FileContent.FromString,
                _registered_method=True)
        self.addFiles = channel.unary_unary(
                '/TagBasedFileSystem.ClientAPI/addFiles',
                request_serializer=communication__pb2.FilesToAdd.SerializeToString,
                response_deserializer=communication__pb2.OperationResult.FromString,
                _registered_method=True)
        self.addTags = channel.unary_unary(
                '/TagBasedFileSystem.ClientAPI/addTags',
                request_serializer=communication__pb2.TagQuery.SerializeToString,
                response_deserializer=communication__pb2.OperationResult.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/TagBasedFileSystem.ClientAPI/delete',
                request_serializer=communication__pb2.TagList.SerializeToString,
                response_deserializer=communication__pb2.OperationResult.FromString,
                _registered_method=True)
        self.deleteTags = channel.unary_unary(
                '/TagBasedFileSystem.ClientAPI/deleteTags',
                request_serializer=communication__pb2.TagQuery.SerializeToString,
                response_deserializer=communication__pb2.OperationResult.FromString,
                _registered_method=True)


class ClientAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list': grpc.unary_stream_rpc_method_handler(
                    servicer.list,
                    request_deserializer=communication__pb2.TagList.FromString,
                    response_serializer=communication__pb2.FileGeneralInfo.SerializeToString,
            ),
            'fileContent': grpc.unary_unary_rpc_method_handler(
                    servicer.fileContent,
                    request_deserializer=communication__pb2.FileLocation.FromString,
                    response_serializer=communication__pb2.FileContent.SerializeToString,
            ),
            'addFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.addFiles,
                    request_deserializer=communication__pb2.FilesToAdd.FromString,
                    response_serializer=communication__pb2.OperationResult.SerializeToString,
            ),
            'addTags': grpc.unary_unary_rpc_method_handler(
                    servicer.addTags,
                    request_deserializer=communication__pb2.TagQuery.FromString,
                    response_serializer=communication__pb2.OperationResult.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=communication__pb2.TagList.FromString,
                    response_serializer=communication__pb2.OperationResult.SerializeToString,
            ),
            'deleteTags': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTags,
                    request_deserializer=communication__pb2.TagQuery.FromString,
                    response_serializer=communication__pb2.OperationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TagBasedFileSystem.ClientAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('TagBasedFileSystem.ClientAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/list',
            communication__pb2.TagList.SerializeToString,
            communication__pb2.FileGeneralInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fileContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/fileContent',
            communication__pb2.FileLocation.SerializeToString,
            communication__pb2.FileContent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/addFiles',
            communication__pb2.FilesToAdd.SerializeToString,
            communication__pb2.OperationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/addTags',
            communication__pb2.TagQuery.SerializeToString,
            communication__pb2.OperationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/delete',
            communication__pb2.TagList.SerializeToString,
            communication__pb2.OperationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TagBasedFileSystem.ClientAPI/deleteTags',
            communication__pb2.TagQuery.SerializeToString,
            communication__pb2.OperationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
